#!/bin/sh
DIR="/etc/kubernetes/ssl"
mkdir -p $DIR
chmod -R 0755 $DIR

if [ ! -s /etc/kubernetes/ssl/ca.pem ];then
        echo "use cfssl to create certificate file"
        exit 0
fi

if [ -z "$2" ];then
	node_name=`hostname`
else
	node_name=$2
fi
{% if TLS_APISERVER == "https" %}
export KUBE_APISERVER="https://{{Master}}:6443"
{% else %}
export KUBE_APISERVER="http://{{Master}}:8080"
{% endif %}

rbac_admin(){
# admin kubeconfig
# 设置集群参数
kubectl config set-cluster kubernetes \
  --certificate-authority=/etc/kubernetes/ssl/ca.pem \
  --embed-certs=true \
  --server=${KUBE_APISERVER}

# 设置客户端认证参数
kubectl config set-credentials admin \
  --client-certificate=/etc/kubernetes/ssl/admin.pem \
  --embed-certs=true \
  --client-key=/etc/kubernetes/ssl/admin-key.pem

# 设置上下文参数
kubectl config set-context kubernetes \
  --cluster=kubernetes \
  --user=admin

chmod -R 0444 *.kubeconfig*
# 设置默认上下文
kubectl config use-context kubernetes
}

rbac_bootstrap(){
#export BOOTSTRAP_TOKEN=$(kubeadm token create \
#      --description kubelet-bootstrap-token \
#      --groups system:bootstrappers:${node_name} \
#      --kubeconfig ~/.kube/config)

export BOOTSTRAP_TOKEN=$(awk -F "," '{print $1}' /etc/kubernetes/token.kubeconfig)

# kube-bootstrap kubeconfig
# 设置集群参数
kubectl config set-cluster kubernetes \
      --certificate-authority=/etc/kubernetes/ssl/ca.pem \
      --embed-certs=true \
      --server=${KUBE_APISERVER} \
      --kubeconfig=bootstrap.kubeconfig.${node_name}

# 设置客户端认证参数
kubectl config set-credentials kubelet-bootstrap \
      --token=${BOOTSTRAP_TOKEN} \
      --kubeconfig=bootstrap.kubeconfig.${node_name}

# 设置上下文参数
kubectl config set-context default \
      --cluster=kubernetes \
      --user=kubelet-bootstrap \
      --kubeconfig=bootstrap.kubeconfig.${node_name}

chmod -R 0444 *.kubeconfig*
# 设置默认上下文
kubectl config use-context default --kubeconfig=bootstrap.kubeconfig.${node_name}

#默认情况下，这个 user 和 group 没有创建 CSR 的权限
#kubectl delete clusterrolebinding kubelet-bootstrap
#kubectl delete clusterrolebinding kubelet-nodes
#解决办法是：创建一个 clusterrolebinding，将 group system:bootstrappers 和 clusterrole system:node-bootstrapper 绑定 #需要加角色
kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --user=kubelet-bootstrap --group=system:bootstrappers
kubectl create clusterrolebinding kubelet-nodes --clusterrole=system:node --group=system:nodes
}

rbac_controller(){
# kube-controller-manager kubeconfig
# 设置集群参数
kubectl config set-cluster kubernetes \
      --certificate-authority=/etc/kubernetes/ssl/ca.pem \
      --embed-certs=true \
      --server=${KUBE_APISERVER} \
      --kubeconfig=controller-manager.kubeconfig.${node_name}

# 设置客户端认证参数
kubectl config set-credentials system:kube-controller-manager \
      --client-certificate=/etc/kubernetes/ssl/kube-controller.pem \
      --client-key=/etc/kubernetes/ssl/kube-controller-key.pem  \
      --embed-certs=true \
      --kubeconfig=controller-manager.kubeconfig.${node_name}

# 设置上下文参数
kubectl config set-context system:kube-controller-manager \
      --cluster=kubernetes \
      --user=system:kube-controller-manager \
      --kubeconfig=controller-manager.kubeconfig.${node_name}

chmod -R 0444 *.kubeconfig*
# 设置默认上下文
kubectl config use-context system:kube-controller-manager --kubeconfig=controller-manager.kubeconfig.${node_name}
}

rbac_scheduler(){
# kube-scheduler kubeconfig
# 设置集群参数
kubectl config set-cluster kubernetes \
      --certificate-authority=/etc/kubernetes/ssl/ca.pem \
      --embed-certs=true \
      --server=${KUBE_APISERVER} \
      --kubeconfig=kube-scheduler.kubeconfig.${node_name}

# 设置客户端认证参数
kubectl config set-credentials system:kube-scheduler \
      --client-certificate=/etc/kubernetes/ssl/kube-scheduler.pem \
      --client-key=/etc/kubernetes/ssl/kube-scheduler-key.pem \
      --embed-certs=true \
      --kubeconfig=kube-scheduler.kubeconfig.${node_name}

# 设置上下文参数
kubectl config set-context system:kube-scheduler \
      --cluster=kubernetes \
      --user=system:kube-scheduler \
      --kubeconfig=kube-scheduler.kubeconfig.${node_name}

chmod -R 0444 *.kubeconfig*
# 设置默认上下文
kubectl config use-context system:kube-scheduler --kubeconfig=kube-scheduler.kubeconfig.${node_name}
}

case $1 in
	rbac_admin)
		rbac_admin $@;;
	rbac_bootstrap)
		rbac_bootstrap $@;;
	rbac_controller)
		rbac_controller $@;;
	rbac_scheduler)
		rbac_scheduler $@;;
        all)
                rbac_admin $@
                rbac_bootstrap $@
                rbac_controller $@
                rbac_scheduler $@
                ;;
        *)
                echo "$0 rbac_admin|rbac_bootstrap|rbac_controller|rbac_scheduler|all";;
esac
